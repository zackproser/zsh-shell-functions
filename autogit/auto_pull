# Global variable to store the last processed repository root
typeset -g LAST_PROCESSED_REPO=""

function auto_pull() {
  if is_git_repository; then
 
    local repo_root=$(git rev-parse --show-toplevel)

    # If we're in the same repository as the last processed one, skip
    if [[ "$repo_root" == "$LAST_PROCESSED_REPO" ]]; then
      return
    fi

    LAST_PROCESSED_REPO=$repo_root

    # Check if the repository has any commits
    if [ -z "$(git rev-parse HEAD 2>/dev/null)" ]; then
      echo "The repository is brand new and doesn't have any commits."
      return
    fi

    # Check if the repository has a remote set up
    if [ -z "$(git config --get remote.origin.url)" ]; then
      echo "The repository doesn't have a remote set up."
      return
    fi

    # Fetch all branches and tags, and prune deleted ones
    echo "Fetching all branches and tags, and pruning deleted ones..."
    git fetch --all --prune

    # Check if the repository was cloned when the default branch was 'master' but now it's 'main'
    if check_and_switch_to_main; then
      return
    fi

    # Determine the default branch
    local default_branch=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@')
    if [[ -z "$default_branch" ]]; then
      if git show-ref --verify --quiet refs/remotes/origin/main; then
        default_branch="main"
      elif git show-ref --verify --quiet refs/remotes/origin/master; then
        default_branch="master"
      else
        echo "Could not determine default branch"
        return
      fi
    fi

    # Check if the repository needs to be updated
    if ! needs_pull $default_branch; then
      echo "The repository is already up to date."
      return
    fi

    # Check if there are any changes
    if ! git diff-index --quiet HEAD --; then
      local stashName="auto_pull_$(date +%s)"
      git stash save -u $stashName > /dev/null 2>&1
      if git stash list | grep -q $stashName; then
        echo "Local changes detected and stashed."
      fi
    fi

    git checkout $original_branch > /dev/null 2>&1

    if git stash list | grep -q $stashName; then
      echo "Applying stashed changes..."
      git stash apply
    fi
  fi
}

